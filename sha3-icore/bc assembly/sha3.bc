
when 0 =>                           ## init atoms; setup AGUs; prepare wait loop
	s_control1 <=                       ## setup agu 0 for atom 0
	-- REPLACE_AGU_CONTROL
	InitMode := 18
	BaseAddr := Signal0L
	DirectStride := 4
	-- END_REPLACE

	s_control2 <=                       ## setup agu 1 for atom 1
	-- REPLACE_AGU_CONTROL
    InitMode := 18
    BaseAddr := Signal1L
    DirectStride := 4
	-- END_REPLACE

	s_control7 <=                       ## init atom 0
	-- REPLACE_ATOM_CONTROL
    AtomControl := 000001
	-- END_REPLACE

	s_control8 <=                       ## init atom 1
	-- REPLACE_ATOM_CONTROL
    AtomControl := 010001
	-- END_REPLACE

	-- JMP_EXC_CONTROL                  ## setup jump set 0 as wait loop
    -- INSTRUCTION := SET_JUMP_STEPS
    -- SET := 00
    -- VALUE := 1
    -- SIGN := 1
	-- END_JMP_EXC_CONTROL

when 1 =>                             ## wait until atoms emit ready
    s_control7 <=                       ## clear atom 0 init trigger
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000000
    -- END_REPLACE

    s_control8 <=                       ## clear atom 1 init trigger
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000000
    -- END_REPLACE

    -- JMP_EXC_CONTROL                  ## IF ATOM1 == 0 AND ATOM2 == 0 THEN GOTO 1
    -- INSTRUCTION := JMP_IF_ATOM_EQ
    -- SET := 00
    -- VALUE := 00000000
    -- AC := 01100
    -- END_JMP_EXC_CONTROL
                                ## FOR_EACH_BLOCK:
when 2 =>                           ## switch atoms to read mode and setup data channels for the atoms
    s_control7 <=                       ## trigger read for atom 0 and setup data channels to left
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000010
    AtomInput0 := Signal0L
    AtomInput1 := Signal1L
    -- END_REPLACE

    s_control8 <=                       ## trigger read for atom 1 and setup data channels to right
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000010
    AtomInput0 := Signal0R
    AtomInput1 := Signal1R
    -- END_REPLACE

    -- JMP_EXC_CONTROL                  ## setup jump set 1 for FOR_EACH_BLOCK loop
    INSTRUCTION := SET_JUMP_STEPS
    SET := 01
    VALUE := 3
    -- END_JMP_EXC_CONTROL

when 3 =>                           ## read first slice batch into lsu memory
    s_control3 <=
    -- REPLACE_LSU_CONTROL              ## load data for atom 0 into lsu 0 at address 0
    SystemMemoryAddress := AGU0 Port0
    Phase := 0
    Access := Read
    Memory0[Address0] := LSU.0
    Memory1[Address0] := LSU.1
    Memory2[Address0] := LSU.2
    Memory3[Address0] := LSU.3
    -- END_REPLACE

    s_control7 <=                       ## clear read trigger for atom 0 and keep data channels
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000000
    AtomInput0 := Signal0L
    AtomInput1 := Signal1L
    -- END_REPLACE

    s_control8 <=                       ## clear read trigger for atom 1 and keep data channels
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000000
    AtomInput0 := Signal0R
    AtomInput1 := Signal1R
    -- END_REPLACE

    s_control13 <=                      ## load data for atom 1 into lsu 1 at address 0
    -- REPLACE_LSU_CONTROL
    SystemMemoryAddress := AGU1 Port0
    Phase := 0
    Access := Read
    Memory0[Address0] := LSU.0
    Memory1[Address0] := LSU.1
    Memory2[Address0] := LSU.2
    Memory3[Address0] := LSU.3
    -- END_REPLACE

when 4 =>                           ## output first two words to atoms
    s_control3 <=                       ## output data to atom 0
    -- REPLACE_LSU_CONTROL              
    Signal0R := Memory0 Port0 Address0
    Signal1R := Memory1 Port0 Address0
    -- END_REPLACE

    s_control7 <=                       ## receive data from lsu 0 and enable "transmission active" signal 
    -- REPLACE_ATOM_CONTROL
    AtomControl := 001000
    AtomInput0 := Signal0L
    AtomInput1 := Signal1L
    -- END_REPLACE

    s_control8 <=                       ## receive data from lsu 1 and enable "transmission active" signal 
    -- REPLACE_ATOM_CONTROL
    AtomControl := 001000
    AtomInput0 := Signal0R
    AtomInput1 := Signal1R
    -- END_REPLACE

    s_control13 <=                      ## outpt data to atom 1
    -- REPLACE_LSU_CONTROL
    Signal0L := Memory0 Port0 Address0
    Signal1L := Memory0 Port0 Address0
    -- END_REPLACE



when 5 =>                           ## output last two datapoints to atoms
    s_control3 <=                       ## output data to atom 0
    -- REPLACE_LSU_CONTROL
    Signal0R := Memory2 Port0 Address0
    Signal1R := Memory3 Port0 Address0
    -- END_REPLACE

    s_control7 <=                       ## receive data from lsu 0 and enable "transmission active" signal 
    -- REPLACE_ATOM_CONTROL
    AtomControl := 001000
    AtomInput0 := Signal0L
    AtomInput1 := Signal1L
    -- END_REPLACE

    s_control8 <=                       ## receive data from lsu 1 and enable "transmission active" signal 
    -- REPLACE_ATOM_CONTROL
    AtomControl := 001000
    AtomInput0 := Signal0R
    AtomInput1 := Signal1R
    -- END_REPLACE

    s_control13 <=                      ## output data to atom 1
    -- REPLACE_LSU_CONTROL
    Signal0L := Memory2 Port0 Address0
    Signal1L := Memory3 Port0 Address0
    -- END_REPLACE

## now I have to do that like 7 more times...

## wait for atoms to emit ready

## setup wait loop

when =>
    -- JMP_EXC_CONTROL
    -- INSTRUCTION := SET_JUMP_STEPS
    -- SET := 00
    -- VALUE := 1
    -- SIGN := 1
	-- END_JMP_EXC_CONTROL

## actual loop

when =>
    s_control7 <=
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000000
    AtomInput0 := Signal0R
    AtomInput1 := Signal1R
    Signal0R := AtomOutput0
    Signal1R := AtomOutput1
    -- END_REPLACE

    s_control8 <=
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000000
    AtomInput0 := Signal0L
    AtomInput1 := Signal1L
    Signal0L := AtomOutput0
    Signal1L := AtomOutput1
    -- END_REPLACE

    -- JMP_EXC_CONTROL
    -- INSTRUCTION := JMP_IF_ATOM_EQ
    -- SET := 00
    -- VALUE := 00000000
    -- AC := 01100
    -- END_JMP_EXC_CONTROL

## jump back to block loop if block count < counter
    
## Section: write back result to destination address

when => ## setup AGU, trigger write
    s_control1 <=
    -- REPLACE_AGU_CONTROL
    InitMode := 18
    BaseAddr := Signal3L
    DirectStride := 4
    -- END_REPLACE

    s_control7 <=
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000100
    Signal2L := AtomOutput0
    Signal3L := AtomOutput1
    -- END_REPLACE

## write data into lsu mem

when =>

    s_control3 <=
    -- REPLACE_LSU_CONTROL
    Memory0[Address1] := Signal2R
    Memory1[Address1] := Signal3R
    -- END_REPLACE

    s_control7 <=
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000000
    Signal2L := AtomOutput0
    Signal3L := AtomOutput1
    -- END_REPLACE

when =>

    s_control3 <=
    -- REPLACE_LSU_CONTROL
    Memory2[Address1] := Signal2R
    Memory3[Address1] := Signal3R
    -- END_REPLACE

    s_control7 <=
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000000
    Signal2L := AtomOutput0
    Signal3L := AtomOutput1
    -- END_REPLACE

when =>

    s_control3 <=
    -- REPLACE_LSU_CONTROL
    Memory0[Address2] := Signal2R
    Memory1[Address2] := Signal3R
    SystemMemoryAddress := Signal3L
    Phase := 0
    Access := Write
    LSU.0 := Memory0 Port0 Address1
    LSU.1 := Memory1 Port0 Address1
    LSU.2 := Memory2 Port0 Address1
    LSU.3 := Memory3 Port0 Address1
    -- END_REPLACE

    s_control7 <=
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000000
    Signal2L := AtomOutput0
    Signal3L := AtomOutput1
    -- END_REPLACE

when =>

    s_control3 <=
    -- REPLACE_LSU_CONTROL
    Memory2[Address2] := Signal2R
    Memory3[Address2] := Signal3R
    -- END_REPLACE

    s_control7 <=
    -- REPLACE_ATOM_CONTROL
    AtomControl := 000000
    Signal2L := AtomOutput0
    Signal3L := AtomOutput1
    -- END_REPLACE

when =>

    s_control3 <=
    -- REPLACE_LSU_CONTROL
    SystemMemoryAddress := Signal3L
    Phase := 0
    Access := Write
    LSU.0 := Memory0 Port0 Address2
    LSU.1 := Memory1 Port0 Address2
    LSU.2 := Memory2 Port0 Address2
    LSU.3 := Memory3 Port0 Address2
    -- END_REPLACE
    



when 999 =>
	s_control1 <=
	-- REPLACE_AGU_CONTROL
	InitMode := 18
	BaseAddr := Signal1L
	DirectStride := 4
	-- END_REPLACE

	s_control2 <=
	-- REPLACE_AGU_CONTROL
	InitMode := 18
	BaseAddr := Signal3L
	DirectStride := 4
	-- END_REPLACE

	s_control3 <=
	-- REPLACE_LSU_CONTROL
	-- END_REPLACE

	s_control4 <=
	-- REPLACE_AGU_CONTROL
	-- END_REPLACE

	s_control5 <=
	-- REPLACE_PACK_CONTROL
	-- END_REPLACE

	s_control6 <=
	-- REPLACE_ATOM_CONTROL
	-- END_REPLACE

	s_control7 <=
	-- REPLACE_ATOM_CONTROL
	-- END_REPLACE

	s_control8 <=
	-- REPLACE_ATOM_CONTROL
	-- END_REPLACE

	s_control9 <=
	-- REPLACE_ATOM_CONTROL
	-- END_REPLACE

	s_control10 <=
	-- REPLACE_ATOM_CONTROL
	-- END_REPLACE

	s_control11 <=
	-- REPLACE_PACK_CONTROL
	-- END_REPLACE

	s_control12 <=
	-- REPLACE_AGU_CONTROL
	-- END_REPLACE

	s_control13 <=
	-- REPLACE_LSU_CONTROL
	-- END_REPLACE

	s_control14 <=
	-- REPLACE_AGU_CONTROL
	-- END_REPLACE

	s_control15 <=
	-- REPLACE_AGU_CONTROL
	-- END_REPLACE

	-- JMP_EXC_CONTROL
	-- INSTRUCTION := SET_CNT
	-- SET := 10
	-- VALUE := 000000001000
	-- END_JMP_EXC_CONTROL