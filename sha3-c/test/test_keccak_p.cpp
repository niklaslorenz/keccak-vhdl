
#include <sha3/keccak_p.h>
#include <gtest/gtest.h>

static const keccak::StateArray challenge {
        11135145641564493638ULL, 4690410588688054413ULL, 5942120574033349132ULL, 13573068674282494865ULL, 8619542337573900380ULL,
        14913265890990278630ULL, 12293567811752120290ULL, 5083587110792712687ULL, 12176370342766063716ULL, 9906014387961132879ULL,
        7879745451526299310ULL, 18170082350327207369ULL, 15513735425375771008ULL, 17112543871859983257ULL, 7872178071685394028ULL,
        18289554777626175141ULL, 682470166150385253ULL, 6714355573324303858ULL, 14786747337765315131ULL, 15725910239405511884ULL,
        11932349210380144580ULL, 12526531113480741395ULL, 16479949546188248102ULL, 5088349251940101775ULL, 14454677966065213854ULL
};

TEST(keccak_p, rotl) {
    ASSERT_EQ(0b0100001111111101111110110111001111011000011010111010001101001101,
              keccak::rotl(0b1001101010000111111110111111011011100111101100001101011101000110, 7));
}

static keccak::StateArray theta {
        9074302370870113994ULL, 15286267072030484620ULL, 402830098023599468, 14163636002501572733ULL, 14352426547025607258ULL,
        2999131593193203306ULL, 4589048960692428771ULL, 1255663659163178639ULL, 14999596714094039944ULL, 4164123666315238729ULL,
        9958554602951147298ULL, 7574224295686227400ULL, 9271320461100097248ULL, 10784320180623089781ULL, 15965071356446229610ULL,
        1925309939123128105ULL, 11262529038166122084ULL, 779028363056302738ULL, 13107579041759183319ULL, 7677902871850991306ULL,
        4823819717382598216ULL, 4099182555226321426ULL, 12922250334435087174ULL, 4489841723125435747ULL, 8658626538535324568ULL
};

TEST(keccak_p, theta) {
    keccak::StateArray result;
    keccak::theta(result, challenge);
    ASSERT_EQ(theta, result);
}

static const keccak::StateArray rho {
    11135145641564493638ULL, 9380821177376108826ULL, 1485530143508337283ULL, 13594521990043390880ULL, 12946796158717326880ULL,
    1642826970421593350ULL, 10736065470129809050ULL, 11754925837671234513ULL, 3626661675222111768ULL, 13375661547741288339ULL,
    7697731391081739635ULL, 11846300435832317936ULL, 6110266191960433799ULL, 17904905873987925999ULL, 13166051643878023089ULL,
    16847205325208180232ULL, 4741341731283272166ULL, 1686859556966706839ULL, 10053827174738798242ULL, 4442813219128790234ULL,
    16252315111372527200ULL, 13212636306503862350ULL, 15895051748555694724ULL, 10324112311689085870ULL, 6143377729240150566ULL
};

TEST(keccak_p, rho) {
    keccak::StateArray result;
    keccak::rho(result, challenge);
    ASSERT_EQ(rho,result);
}

static const keccak::StateArray pi{
        11135145641564493638ULL, 12293567811752120290ULL, 15513735425375771008ULL, 14786747337765315131ULL, 14454677966065213854ULL,
        13573068674282494865ULL, 9906014387961132879ULL, 7879745451526299310ULL, 682470166150385253ULL, 16479949546188248102ULL,
        4690410588688054413ULL, 5083587110792712687ULL, 17112543871859983257ULL, 15725910239405511884ULL, 11932349210380144580ULL,
        8619542337573900380ULL, 14913265890990278630ULL, 18170082350327207369ULL, 6714355573324303858ULL, 5088349251940101775ULL,
        5942120574033349132ULL, 12176370342766063716ULL, 7872178071685394028ULL, 18289554777626175141ULL, 12526531113480741395ULL
};

TEST(keccak_p, pi) {
    keccak::StateArray result;
    keccak::pi(result, challenge);
    ASSERT_EQ(pi, result);
}

static const keccak::StateArray rho_pi {
        11135145641564493638ULL, 10736065470129809050ULL, 6110266191960433799ULL, 10053827174738798242ULL, 6143377729240150566ULL,
        13594521990043390880ULL, 13375661547741288339ULL, 7697731391081739635ULL, 4741341731283272166ULL, 15895051748555694724ULL,
        9380821177376108826ULL, 11754925837671234513ULL, 17904905873987925999ULL, 4442813219128790234ULL, 16252315111372527200ULL,
        12946796158717326880ULL, 1642826970421593350ULL, 11846300435832317936ULL, 1686859556966706839ULL, 10324112311689085870ULL,
        1485530143508337283ULL, 3626661675222111768ULL, 13166051643878023089ULL, 16847205325208180232ULL, 13212636306503862350ULL
};

TEST(keccak_p, rho_pi) {
    keccak::StateArray res1, res2;
    keccak::rho(res1, challenge);
    keccak::pi(res2, res1);
    ASSERT_EQ(rho_pi, res2);
}

static const keccak::StateArray chi {
        9865130445135729990ULL, 17086295892730341660ULL, 1293768093163850304ULL, 3772892697877519507ULL, 3931290727304362197ULL,
        10012224700612630507ULL, 209609359884906466ULL, 5155658412626613988ULL, 17185076540980080836ULL, 12209325745756307279ULL,
        7933300412350404270ULL, 15283311067260327888ULL, 15514852543175325156ULL, 17094421171246469915ULL, 18239184040838917933ULL,
        12238441805229336375ULL, 9901602538248350828ULL, 5703394218348206390ULL, 16786342411221598234ULL, 15714671031697513612ULL,
        16553185089561238496ULL, 12672669268650182810ULL, 7833043761328362806ULL, 7177993226857980111ULL, 13897634060854575501ULL
};

TEST(keccak_p, chi) {
    keccak::StateArray result;
    keccak::chi(result, challenge);
    ASSERT_EQ(chi, result);

}